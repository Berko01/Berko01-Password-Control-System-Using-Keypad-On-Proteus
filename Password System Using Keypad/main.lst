CCS PCM C Compiler, Version 5.007, 61971               11-Tem-23 00:00

               Filename:   C:\Users\berki\Desktop\Genel Ders\2. Sýnýf Ders\2. Dönem\Mikro Ýþlemciler\Mikro Projeler\Password System Using Keypad\main.lst

               ROM used:   696 words (8%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           31 (8%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   27F
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA D3,34
000D:  DATA 66,39
000E:  DATA 65,10
000F:  DATA F9,30
0010:  DATA 6E,36
0011:  DATA E9,39
0012:  DATA 2E,00
0013:  DATA 2F,33
0014:  DATA D3,34
0015:  DATA 66,39
0016:  DATA 65,10
0017:  DATA E4,37
0018:  DATA 67,39
0019:  DATA 75,17
001A:  DATA 00,00
*
00F3:  MOVF   31,W
00F4:  CLRF   78
00F5:  SUBWF  30,W
00F6:  BTFSC  03.0
00F7:  GOTO   0FB
00F8:  MOVF   30,W
00F9:  MOVWF  77
00FA:  GOTO   107
00FB:  CLRF   77
00FC:  MOVLW  08
00FD:  MOVWF  32
00FE:  RLF    30,F
00FF:  RLF    77,F
0100:  MOVF   31,W
0101:  SUBWF  77,W
0102:  BTFSC  03.0
0103:  MOVWF  77
0104:  RLF    78,F
0105:  DECFSZ 32,F
0106:  GOTO   0FE
0107:  RETURN
0108:  MOVLW  20
0109:  BTFSS  2B.4
010A:  MOVLW  30
010B:  MOVWF  2C
010C:  MOVF   2A,W
010D:  MOVWF  77
010E:  BTFSS  2A.7
010F:  GOTO   118
0110:  COMF   77,F
0111:  INCF   77,F
0112:  MOVF   77,W
0113:  MOVWF  2A
0114:  MOVLW  2D
0115:  MOVWF  2C
0116:  BSF    2B.7
0117:  BSF    2B.0
0118:  MOVF   2A,W
0119:  MOVWF  30
011A:  MOVLW  64
011B:  MOVWF  31
011C:  CALL   0F3
011D:  MOVF   77,W
011E:  MOVWF  2A
011F:  MOVLW  30
0120:  ADDWF  78,W
0121:  MOVWF  2D
0122:  MOVF   2A,W
0123:  MOVWF  30
0124:  MOVLW  0A
0125:  MOVWF  31
0126:  CALL   0F3
0127:  MOVLW  30
0128:  ADDWF  77,W
0129:  MOVWF  2F
012A:  MOVLW  30
012B:  ADDWF  78,W
012C:  MOVWF  2E
012D:  MOVF   2C,W
012E:  MOVWF  77
012F:  MOVLW  30
0130:  SUBWF  2D,W
0131:  BTFSC  03.2
0132:  GOTO   137
0133:  BSF    2B.1
0134:  BTFSC  2B.7
0135:  BSF    2B.2
0136:  GOTO   14B
0137:  MOVF   2C,W
0138:  MOVWF  2D
0139:  MOVLW  20
013A:  MOVWF  2C
013B:  MOVLW  30
013C:  SUBWF  2E,W
013D:  BTFSC  03.2
013E:  GOTO   143
013F:  BSF    2B.0
0140:  BTFSC  2B.7
0141:  BSF    2B.1
0142:  GOTO   14B
0143:  BTFSS  03.2
0144:  BSF    2B.0
0145:  BTFSS  03.2
0146:  GOTO   14B
0147:  MOVF   2D,W
0148:  MOVWF  2E
0149:  MOVLW  20
014A:  MOVWF  2D
014B:  BTFSC  2B.2
014C:  GOTO   152
014D:  BTFSC  2B.1
014E:  GOTO   155
014F:  BTFSC  2B.0
0150:  GOTO   158
0151:  GOTO   15B
0152:  MOVF   2C,W
0153:  MOVWF  30
0154:  CALL   0C7
0155:  MOVF   2D,W
0156:  MOVWF  30
0157:  CALL   0C7
0158:  MOVF   2E,W
0159:  MOVWF  30
015A:  CALL   0C7
015B:  MOVF   2F,W
015C:  MOVWF  30
015D:  CALL   0C7
015E:  RETURN
*
0207:  MOVF   0B,W
0208:  MOVWF  2B
0209:  BCF    0B.7
020A:  BSF    03.5
020B:  BSF    03.6
020C:  BSF    0C.7
020D:  BSF    0C.0
020E:  NOP
020F:  NOP
0210:  BCF    03.5
0211:  MOVF   0C,W
0212:  ANDLW  7F
0213:  BTFSC  03.2
0214:  GOTO   24E
0215:  BCF    03.6
0216:  MOVWF  2C
0217:  BSF    03.6
0218:  MOVF   0D,W
0219:  BCF    03.6
021A:  MOVWF  2D
021B:  BSF    03.6
021C:  MOVF   0F,W
021D:  BCF    03.6
021E:  MOVWF  2E
021F:  MOVF   2C,W
0220:  MOVWF  30
0221:  CALL   0C7
0222:  MOVF   2D,W
0223:  BSF    03.6
0224:  MOVWF  0D
0225:  BCF    03.6
0226:  MOVF   2E,W
0227:  BSF    03.6
0228:  MOVWF  0F
0229:  BSF    03.5
022A:  BSF    0C.7
022B:  BSF    0C.0
022C:  NOP
022D:  NOP
022E:  BCF    03.5
022F:  RLF    0C,W
0230:  RLF    0E,W
0231:  ANDLW  7F
0232:  BTFSC  03.2
0233:  GOTO   24E
0234:  BCF    03.6
0235:  MOVWF  2C
0236:  BSF    03.6
0237:  MOVF   0D,W
0238:  BCF    03.6
0239:  MOVWF  2D
023A:  BSF    03.6
023B:  MOVF   0F,W
023C:  BCF    03.6
023D:  MOVWF  2E
023E:  MOVF   2C,W
023F:  MOVWF  30
0240:  CALL   0C7
0241:  MOVF   2D,W
0242:  BSF    03.6
0243:  MOVWF  0D
0244:  BCF    03.6
0245:  MOVF   2E,W
0246:  BSF    03.6
0247:  MOVWF  0F
0248:  INCF   0D,F
0249:  BTFSC  03.2
024A:  INCF   0F,F
024B:  BCF    03.6
024C:  GOTO   20A
024D:  BSF    03.6
024E:  BCF    03.6
024F:  BTFSC  2B.7
0250:  BSF    0B.7
0251:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
001B:  MOVLW  31
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   02F
0021:  MOVLW  01
0022:  MOVWF  78
0023:  CLRF   77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 78,F
0027:  GOTO   023
0028:  MOVLW  4A
0029:  MOVWF  77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  GOTO   02D
002D:  DECFSZ 00,F
002E:  GOTO   021
002F:  RETURN
.................... #use FIXED_IO( B_outputs=PIN_B7,PIN_B6,PIN_B5,PIN_B4,PIN_B3,PIN_B2,PIN_B1,PIN_B0 ) 
....................  
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0048:  MOVLW  0F
0049:  BSF    03.5
004A:  ANDWF  06,W
004B:  IORLW  F0
004C:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004D:  BCF    03.5
004E:  BSF    06.2
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    06.0
....................    delay_cycles(1); 
0051:  NOP
....................    high = lcd_read_nibble(); 
0052:  CALL   03C
0053:  MOVF   78,W
0054:  MOVWF  38
....................        
....................    lcd_output_enable(0); 
0055:  BCF    06.0
....................    delay_cycles(1); 
0056:  NOP
....................    lcd_output_enable(1); 
0057:  BSF    06.0
....................    delay_us(1); 
0058:  NOP
....................    low = lcd_read_nibble(); 
0059:  CALL   03C
005A:  MOVF   78,W
005B:  MOVWF  37
....................        
....................    lcd_output_enable(0); 
005C:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005D:  MOVLW  0F
005E:  BSF    03.5
005F:  ANDWF  06,W
0060:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0061:  BCF    03.5
0062:  SWAPF  38,W
0063:  MOVWF  77
0064:  MOVLW  F0
0065:  ANDWF  77,F
0066:  MOVF   77,W
0067:  IORWF  37,W
0068:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003C:  MOVF   06,W
003D:  MOVWF  77
003E:  SWAPF  06,W
003F:  ANDLW  0F
0040:  MOVWF  78
....................   #endif 
0041:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0030:  SWAPF  38,W
0031:  ANDLW  F0
0032:  MOVWF  77
0033:  MOVLW  0F
0034:  ANDWF  06,W
0035:  IORWF  77,W
0036:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0037:  NOP
....................    lcd_output_enable(1); 
0038:  BSF    06.0
....................    delay_us(2); 
0039:  GOTO   03A
....................    lcd_output_enable(0); 
003A:  BCF    06.0
003B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0042:  BSF    03.5
0043:  BCF    06.0
....................    lcd_rs_tris(); 
0044:  BCF    06.1
....................    lcd_rw_tris(); 
0045:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0046:  BCF    03.5
0047:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0069:  MOVF   78,W
006A:  MOVWF  37
006B:  BTFSC  37.7
006C:  GOTO   048
....................    lcd_output_rs(address); 
006D:  BTFSS  35.0
006E:  BCF    06.1
006F:  BTFSC  35.0
0070:  BSF    06.1
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_rw(0); 
0072:  BCF    06.2
....................    delay_cycles(1); 
0073:  NOP
....................    lcd_output_enable(0); 
0074:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0075:  SWAPF  36,W
0076:  MOVWF  37
0077:  MOVLW  0F
0078:  ANDWF  37,F
0079:  MOVF   37,W
007A:  MOVWF  38
007B:  CALL   030
....................    lcd_send_nibble(n & 0xf); 
007C:  MOVF   36,W
007D:  ANDLW  0F
007E:  MOVWF  37
007F:  MOVWF  38
0080:  CALL   030
0081:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0082:  MOVLW  0F
0083:  BSF    03.5
0084:  ANDWF  06,W
0085:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0086:  BCF    06.0
....................    lcd_rs_tris(); 
0087:  BCF    06.1
....................    lcd_rw_tris(); 
0088:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0089:  BCF    03.5
008A:  BCF    06.1
....................    lcd_output_rw(0); 
008B:  BCF    06.2
....................    lcd_output_enable(0); 
008C:  BCF    06.0
....................      
....................    delay_ms(15); 
008D:  MOVLW  0F
008E:  MOVWF  31
008F:  CALL   01B
....................    for(i=1;i<=3;++i) 
0090:  MOVLW  01
0091:  MOVWF  2A
0092:  MOVF   2A,W
0093:  SUBLW  03
0094:  BTFSS  03.0
0095:  GOTO   09E
....................    { 
....................        lcd_send_nibble(3); 
0096:  MOVLW  03
0097:  MOVWF  38
0098:  CALL   030
....................        delay_ms(5); 
0099:  MOVLW  05
009A:  MOVWF  31
009B:  CALL   01B
009C:  INCF   2A,F
009D:  GOTO   092
....................    } 
....................     
....................    lcd_send_nibble(2); 
009E:  MOVLW  02
009F:  MOVWF  38
00A0:  CALL   030
....................    delay_ms(5); 
00A1:  MOVLW  05
00A2:  MOVWF  31
00A3:  CALL   01B
....................    for(i=0;i<=3;++i) 
00A4:  CLRF   2A
00A5:  MOVF   2A,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A9:  MOVF   2A,W
00AA:  CALL   004
00AB:  MOVWF  2B
00AC:  CLRF   35
00AD:  MOVF   2B,W
00AE:  MOVWF  36
00AF:  CALL   042
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B0:  INCF   2A,F
00B1:  GOTO   0A5
00B2:  BCF    0A.3
00B3:  BCF    0A.4
00B4:  GOTO   29A (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B5:  DECFSZ 32,W
00B6:  GOTO   0B8
00B7:  GOTO   0BB
....................       address=LCD_LINE_TWO; 
00B8:  MOVLW  40
00B9:  MOVWF  33
00BA:  GOTO   0BC
....................    else 
....................       address=0; 
00BB:  CLRF   33
....................       
....................    address+=x-1; 
00BC:  MOVLW  01
00BD:  SUBWF  31,W
00BE:  ADDWF  33,F
....................    lcd_send_byte(0,0x80|address); 
00BF:  MOVF   33,W
00C0:  IORLW  80
00C1:  MOVWF  34
00C2:  CLRF   35
00C3:  MOVF   34,W
00C4:  MOVWF  36
00C5:  CALL   042
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C7:  MOVF   30,W
00C8:  XORLW  07
00C9:  BTFSC  03.2
00CA:  GOTO   0D5
00CB:  XORLW  0B
00CC:  BTFSC  03.2
00CD:  GOTO   0DA
00CE:  XORLW  06
00CF:  BTFSC  03.2
00D0:  GOTO   0E2
00D1:  XORLW  02
00D2:  BTFSC  03.2
00D3:  GOTO   0E8
00D4:  GOTO   0ED
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D5:  MOVLW  01
00D6:  MOVWF  31
00D7:  MOVWF  32
00D8:  CALL   0B5
00D9:  GOTO   0F2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DA:  CLRF   35
00DB:  MOVLW  01
00DC:  MOVWF  36
00DD:  CALL   042
....................                      delay_ms(2); 
00DE:  MOVLW  02
00DF:  MOVWF  31
00E0:  CALL   01B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E1:  GOTO   0F2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E2:  MOVLW  01
00E3:  MOVWF  31
00E4:  MOVLW  02
00E5:  MOVWF  32
00E6:  CALL   0B5
00E7:  GOTO   0F2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E8:  CLRF   35
00E9:  MOVLW  10
00EA:  MOVWF  36
00EB:  CALL   042
00EC:  GOTO   0F2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00ED:  MOVLW  01
00EE:  MOVWF  35
00EF:  MOVF   30,W
00F0:  MOVWF  36
00F1:  CALL   042
....................      #endif 
....................    } 
00F2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................    int a; 
....................    int password[] = {1,2,3,4}; 
*
028A:  MOVLW  01
028B:  BCF    03.5
028C:  MOVWF  21
028D:  MOVLW  02
028E:  MOVWF  22
028F:  MOVLW  03
0290:  MOVWF  23
0291:  MOVLW  04
0292:  MOVWF  24
....................    int inputPassword[4]; 
....................    int index = 0; 
....................  
....................     
....................    void showInput() 
....................    { 
....................       switch(a) 
*
015F:  MOVF   20,W
0160:  XORLW  78
0161:  BTFSC  03.2
0162:  GOTO   17F
0163:  XORLW  50
0164:  BTFSC  03.2
0165:  GOTO   18E
0166:  XORLW  40
0167:  BTFSC  03.2
0168:  GOTO   19E
0169:  XORLW  C0
016A:  BTFSC  03.2
016B:  GOTO   1AE
016C:  XORLW  B0
016D:  BTFSC  03.2
016E:  GOTO   1BE
016F:  XORLW  40
0170:  BTFSC  03.2
0171:  GOTO   1CE
0172:  XORLW  C0
0173:  BTFSC  03.2
0174:  GOTO   1D9
0175:  XORLW  90
0176:  BTFSC  03.2
0177:  GOTO   1E4
0178:  XORLW  40
0179:  BTFSC  03.2
017A:  GOTO   1EF
017B:  XORLW  C0
017C:  BTFSC  03.2
017D:  GOTO   1FA
017E:  GOTO   204
....................       { 
....................         case 0b01111000: 
....................          printf(lcd_putc,"0"); 
017F:  MOVLW  30
0180:  MOVWF  30
0181:  CALL   0C7
....................          printf(lcd_putc,"%d",index); 
0182:  MOVF   29,W
0183:  MOVWF  2A
0184:  MOVLW  18
0185:  MOVWF  2B
0186:  CALL   108
....................          inputPassword[index] = 0;  
0187:  MOVLW  25
0188:  ADDWF  29,W
0189:  MOVWF  04
018A:  BCF    03.7
018B:  CLRF   00
....................          index++; 
018C:  INCF   29,F
....................          break; 
018D:  GOTO   204
....................         
....................          
....................         case 0b00101000: 
....................          printf(lcd_putc,"1"); 
018E:  MOVLW  31
018F:  MOVWF  30
0190:  CALL   0C7
....................          printf(lcd_putc,"%d",index); 
0191:  MOVF   29,W
0192:  MOVWF  2A
0193:  MOVLW  18
0194:  MOVWF  2B
0195:  CALL   108
....................          inputPassword[index] = 1; 
0196:  MOVLW  25
0197:  ADDWF  29,W
0198:  MOVWF  04
0199:  BCF    03.7
019A:  MOVLW  01
019B:  MOVWF  00
....................          index++; 
019C:  INCF   29,F
....................          break; 
019D:  GOTO   204
....................          
....................         case 0b01101000: 
....................          printf(lcd_putc,"2"); 
019E:  MOVLW  32
019F:  MOVWF  30
01A0:  CALL   0C7
....................          printf(lcd_putc,"%d",index); 
01A1:  MOVF   29,W
01A2:  MOVWF  2A
01A3:  MOVLW  18
01A4:  MOVWF  2B
01A5:  CALL   108
....................          inputPassword[index] = 2; 
01A6:  MOVLW  25
01A7:  ADDWF  29,W
01A8:  MOVWF  04
01A9:  BCF    03.7
01AA:  MOVLW  02
01AB:  MOVWF  00
....................          index++; 
01AC:  INCF   29,F
....................          break; 
01AD:  GOTO   204
....................          
....................         case 0b10101000: 
....................          printf(lcd_putc,"3"); 
01AE:  MOVLW  33
01AF:  MOVWF  30
01B0:  CALL   0C7
....................          printf(lcd_putc,"%d",index); 
01B1:  MOVF   29,W
01B2:  MOVWF  2A
01B3:  MOVLW  18
01B4:  MOVWF  2B
01B5:  CALL   108
....................          inputPassword[index] = 3; 
01B6:  MOVLW  25
01B7:  ADDWF  29,W
01B8:  MOVWF  04
01B9:  BCF    03.7
01BA:  MOVLW  03
01BB:  MOVWF  00
....................          index++; 
01BC:  INCF   29,F
....................          break; 
01BD:  GOTO   204
....................          
....................         case 0b00011000: 
....................          printf(lcd_putc,"4"); 
01BE:  MOVLW  34
01BF:  MOVWF  30
01C0:  CALL   0C7
....................          printf(lcd_putc,"%d",index); 
01C1:  MOVF   29,W
01C2:  MOVWF  2A
01C3:  MOVLW  18
01C4:  MOVWF  2B
01C5:  CALL   108
....................          inputPassword[index] = 4; 
01C6:  MOVLW  25
01C7:  ADDWF  29,W
01C8:  MOVWF  04
01C9:  BCF    03.7
01CA:  MOVLW  04
01CB:  MOVWF  00
....................          index++; 
01CC:  INCF   29,F
....................          break; 
01CD:  GOTO   204
....................          
....................         case 0b01011000: 
....................          printf(lcd_putc,"5"); 
01CE:  MOVLW  35
01CF:  MOVWF  30
01D0:  CALL   0C7
....................          inputPassword[index] = 5; 
01D1:  MOVLW  25
01D2:  ADDWF  29,W
01D3:  MOVWF  04
01D4:  BCF    03.7
01D5:  MOVLW  05
01D6:  MOVWF  00
....................          index++; 
01D7:  INCF   29,F
....................          break; 
01D8:  GOTO   204
....................          
....................         case 0b10011000: 
....................          printf(lcd_putc,"6"); 
01D9:  MOVLW  36
01DA:  MOVWF  30
01DB:  CALL   0C7
....................          inputPassword[index] = 6; 
01DC:  MOVLW  25
01DD:  ADDWF  29,W
01DE:  MOVWF  04
01DF:  BCF    03.7
01E0:  MOVLW  06
01E1:  MOVWF  00
....................          index++; 
01E2:  INCF   29,F
....................          break; 
01E3:  GOTO   204
....................          
....................         case 0b00001000: 
....................          printf(lcd_putc,"7"); 
01E4:  MOVLW  37
01E5:  MOVWF  30
01E6:  CALL   0C7
....................          inputPassword[index] = 7; 
01E7:  MOVLW  25
01E8:  ADDWF  29,W
01E9:  MOVWF  04
01EA:  BCF    03.7
01EB:  MOVLW  07
01EC:  MOVWF  00
....................          index++; 
01ED:  INCF   29,F
....................          break; 
01EE:  GOTO   204
....................          
....................         case 0b01001000: 
....................          printf(lcd_putc,"8"); 
01EF:  MOVLW  38
01F0:  MOVWF  30
01F1:  CALL   0C7
....................          inputPassword[index] = 8; 
01F2:  MOVLW  25
01F3:  ADDWF  29,W
01F4:  MOVWF  04
01F5:  BCF    03.7
01F6:  MOVLW  08
01F7:  MOVWF  00
....................          index++; 
01F8:  INCF   29,F
....................          break; 
01F9:  GOTO   204
....................          
....................         case 0b10001000: 
....................          printf(lcd_putc,"9"); 
01FA:  MOVLW  39
01FB:  MOVWF  30
01FC:  CALL   0C7
....................          inputPassword[index] = 9; 
01FD:  MOVLW  25
01FE:  ADDWF  29,W
01FF:  MOVWF  04
0200:  BCF    03.7
0201:  MOVLW  09
0202:  MOVWF  00
....................          index++; 
0203:  INCF   29,F
....................          break; 
....................       } 
0204:  BCF    0A.3
0205:  BCF    0A.4
0206:  GOTO   2A9 (RETURN)
....................        
....................    } 
....................     
....................    int passwordControl(){ 
....................        
....................    for(int i = 0; i<4; i++) 
*
0252:  CLRF   2A
0253:  MOVF   2A,W
0254:  SUBLW  03
0255:  BTFSS  03.0
0256:  GOTO   273
....................    { 
....................       if(inputPassword[i] == Password[i] ) 
0257:  MOVLW  25
0258:  ADDWF  2A,W
0259:  MOVWF  04
025A:  BCF    03.7
025B:  MOVF   00,W
025C:  MOVWF  2B
025D:  MOVLW  21
025E:  ADDWF  2A,W
025F:  MOVWF  04
0260:  BCF    03.7
0261:  MOVF   00,W
0262:  SUBWF  2B,W
0263:  BTFSS  03.2
0264:  GOTO   267
....................       continue; 
0265:  GOTO   271
0266:  GOTO   271
....................       else{ 
....................        printf(lcd_putc,"Sifre yanlis."); 
0267:  MOVLW  0C
0268:  BSF    03.6
0269:  MOVWF  0D
026A:  MOVLW  00
026B:  MOVWF  0F
026C:  BCF    03.6
026D:  CALL   207
....................        return 0; 
026E:  MOVLW  00
026F:  MOVWF  78
0270:  GOTO   27C
....................       } 
0271:  INCF   2A,F
0272:  GOTO   253
....................        
....................         
....................    } 
....................    printf(lcd_putc,"/fSifre dogru."); 
0273:  MOVLW  13
0274:  BSF    03.6
0275:  MOVWF  0D
0276:  MOVLW  00
0277:  MOVWF  0F
0278:  BCF    03.6
0279:  CALL   207
....................    return 1; 
027A:  MOVLW  01
027B:  MOVWF  78
027C:  BCF    0A.3
027D:  BCF    0A.4
027E:  GOTO   2B7 (RETURN)
....................    } 
....................     
....................  
.................... void main() 
027F:  CLRF   29
0280:  BSF    03.5
0281:  BSF    1F.0
0282:  BSF    1F.1
0283:  BSF    1F.2
0284:  BCF    1F.3
0285:  MOVLW  07
0286:  MOVWF  1C
0287:  BCF    03.7
0288:  MOVLW  1F
0289:  ANDWF  03,F
.................... { 
....................    set_tris_b(0x00); 
*
0293:  MOVLW  00
0294:  BSF    03.5
0295:  MOVWF  06
....................    set_tris_d(0xFF); 
0296:  MOVLW  FF
0297:  MOVWF  08
....................    lcd_init(); 
0298:  BCF    03.5
0299:  GOTO   082
....................     
....................  
....................    while(TRUE) 
....................    { 
....................           
....................        
....................  
....................       while(input(pin_D3) == 0); 
029A:  BSF    03.5
029B:  BSF    08.3
029C:  BCF    03.5
029D:  BTFSS  08.3
029E:  GOTO   29A
....................       delay_ms(20); 
029F:  MOVLW  14
02A0:  MOVWF  31
02A1:  CALL   01B
....................       a = input_d(); 
02A2:  MOVLW  FF
02A3:  BSF    03.5
02A4:  MOVWF  08
02A5:  BCF    03.5
02A6:  MOVF   08,W
02A7:  MOVWF  20
....................       showInput(); 
02A8:  GOTO   15F
....................       while(input(pin_D3) == 1); 
02A9:  BSF    03.5
02AA:  BSF    08.3
02AB:  BCF    03.5
02AC:  BTFSC  08.3
02AD:  GOTO   2A9
....................       delay_ms(20); 
02AE:  MOVLW  14
02AF:  MOVWF  31
02B0:  CALL   01B
....................        
....................       if(index == 4) 
02B1:  MOVF   29,W
02B2:  SUBLW  04
02B3:  BTFSC  03.2
....................       break; 
02B4:  GOTO   2B6
02B5:  GOTO   29A
....................        
....................     
....................  } 
....................   
....................  passwordControl(); 
02B6:  GOTO   252
....................  
....................     
....................     
....................     
....................  
.................... } 
02B7:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
